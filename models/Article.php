<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'], 'required' ],
            [['description', 'title', 'content'], 'string'],
            [['date'], 'date', 'format' =>'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function saveImg($fileName) {
        $this->image = $fileName;
        return $this->save(false);

    }

    private function deleteImage() {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function ViewImage() {
        return ($this->image) ? '/uploads/articles/' . $this->image : '/no-image.png';
    }

    public function  beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if ($category != null) {
            $this->link('category',$category);
            return true;
        }
        return false;
    }

    public function sendInfo () {
        if(Yii::$app->request->isPost) {
            $category=Yii::$app->request->post('category');
            return $this->saveCategory($category);
            }

}

    public function getTags()
    {
        return $this->hasMany(tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    public  function  getSelectedTags() {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedTags, 'id');
    }

    public  function saveTags($tags) {
        if(is_array($tags)) {
            ArticleTag::deleteAll(['article_id' => $this->id]);
            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }

        }
    }

    public static function queryForIndexPagination() {
        return $query = Article::find();
    }

    public static  function  queryForCategoryPagination($id) {
        return Article::find()->where(['category_id'=>$id]);
    }


    public static function createPages($paramSize, $query) {
        $countQuery = clone $query;
        $pagination = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => $paramSize ]);
        return [$pagination, $query];

    }

    public static function getArticlesForPage($pagination, $query) {

        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        return $articles;
    }

    public static function  takePopular($limit) {
        $popular = Article::find()->orderBy('viewed desc')->limit($limit)->all();
        return $popular;
    }

    public static function takeRecent($limit ) {
        $recent = Article::find()->orderBy('date asc')->limit($limit)->all();
        return $recent;
    }

    public static function  takeSame($category_id) {
        return Article::find()->where(['category_id'=> $category_id])->all();
    }
        public function getDate() {
            return Yii::$app->formatter->asDate($this->date);
        }

    public function saveArticle() {
        $this->user_id = Yii::$app->user->id;
        return $this->save();
    }



    public function viewCounter() {
        $this->viewed += 1;
        return $this->save();
    }

    public function getAuthor() {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function getComments() {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }
}
